import pandas as pd
import numpy as np

def load_metric_data(filepath):
    """
    Load metric data from a CSV file, expecting specific headers like 'MEAS', 'PAV_NAME', and 'FYTD_P'.
    """
    data = pd.read_csv(filepath)
    data['SNP_MONTH_YR'] = pd.to_datetime(data['SNP_MONTH_YR'], format='%b-%Y')  # Ensure proper date format
    return data

def calculate_statistics(data):
    """
    Calculate mean and standard deviation for each metric across each pavilion.
    """
    grouped = data.groupby(['MEAS', 'PAV_NAME'])
    stats = grouped['FYTD_P'].agg(['mean', 'std']).reset_index()
    return stats

def suggest_ranges(stats):
    """
    Suggest sane, borderline, and insane ranges based on mean and standard deviation, ensuring no overlap.
    """
    stats['Sane Range'] = stats.apply(lambda x: (x['mean'] - x['std'], x['mean'] + x['std']), axis=1)
    stats['Borderline Range'] = stats.apply(
        lambda x: (x['mean'] - 2 * x['std'], x['mean'] + 2 * x['std']), axis=1)
    # Adjusted ranges to be mutually exclusive
    stats['Adjusted Sane Range'] = stats['Sane Range']
    stats['Adjusted Borderline Range'] = stats.apply(
        lambda x: (x['Borderline Range'][0], x['Adjusted Sane Range'][0]) + (x['Adjusted Sane Range'][1], x['Borderline Range'][1]), axis=1)
    return stats

def output_ranges(stats):
    """
    Output the suggested ranges in a readable format.
    """
    for _, row in stats.iterrows():
        print(f"Metric: {row['MEAS']} in {row['PAV_NAME']}")
        print(f"  Mean: {row['mean']:.2f}, Std Dev: {row['std']:.2f}")
        print(f"  Sane Range: {row['Adjusted Sane Range'][0]:.2f}% to {row['Adjusted Sane Range'][1]:.2f}%")
        print(f"  Borderline Range: {row['Adjusted Borderline Range'][0]:.2f}% to {row['Adjusted Borderline Range'][1]:.2f}%")
        print()

def autoband_suggester(filepath):
    """
    Load data, calculate statistics, suggest ranges, and output the results.
    """
    data = load_metric_data(filepath)
    stats = calculate_statistics(data)
    suggested_ranges = suggest_ranges(stats)
    output_ranges(suggested_ranges)

# Use the function with a CSV file
autoband_suggester('metric_data.csv')
