"""Auto Suggester"""

import numpy as np

# Define metrics with practical parameters (mean and standard deviation)
# These parameters are based on realistic healthcare scenarios.
metric_params = {
    # 30-day Readmission
    # Mean: 15% average readmission rate implies on average, 15 out of 100 patients are readmitted within 30 days.
    # Standard Deviation: 3% indicates most monthly rates fluctuate between 12% (15-3) and 18% (15+3), showing consistency in performance.
    "30-day Readmission": {"mean": 15, "std_dev": 3},

    # HTN: Controlling High BP
    # Mean: 70% control rate means on average, 70 out of 100 patients have their blood pressure effectively managed.
    # Standard Deviation: 5% suggests control rates typically range from 65% to 75%, reflecting the care quality's variability.
    "HTN: Controlling High BP": {"mean": 70, "std_dev": 5},
}

def generate_historical_data(metric_params, n=12):
    """
    Generate historical data for each metric over n months.
    """
    historical_data = {}
    for metric, params in metric_params.items():
        # Generate random data around the specified mean and std_dev
        data = np.random.normal(params['mean'], params['std_dev'], n)
        historical_data[metric] = data
    return historical_data

def suggest_ranges(metric, historical_data):
    """
    Suggest sane, borderline, and insane ranges for a metric based on its historical data.
    """
    mean = np.mean(historical_data[metric])
    std_dev = np.std(historical_data[metric])

    sane_range = (mean - std_dev, mean + std_dev)
    borderline_range = (mean - 2*std_dev, mean + 2*std_dev)

    return sane_range, borderline_range

# Example: Generate historical data and suggest ranges
historical_data = generate_historical_data(metric_params)
for metric in metric_params.keys():
    sane_range, borderline_range = suggest_ranges(metric, historical_data)
    print(f"Auto Suggestios For Metric: {metric}")
    print(f"  Sane Range: {sane_range[0]:.2f}% to {sane_range[1]:.2f}%")
    print(f"  Borderline Range: {borderline_range[0]:.2f}% to {borderline_range[1]:.2f}%")
    print(f"  Insane Range: <{borderline_range[0]:.2f}% or >{borderline_range[1]:.2f}%\n")
