# -*- coding: utf-8 -*-
"""Scorecard Alerter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vMHHxAvBvYJazwbr9rC_Jw9QvEY_43jC
"""

import numpy as np

def generate_data(mean, std_dev, n=12, case="sane"):
    """
    Generate mock data for sane and insane cases.

    This function generates n data points centered around a specified mean with a given standard deviation.
    The 'case' parameter dictates whether the data should generally fall within a normal range ('sane')
    or include significant outliers ('insane').
    """
    if case == "sane":
        data = np.random.normal(mean, std_dev, n)
    elif case == "insane":
        data = np.random.normal(mean, std_dev, n - 1)
        # For the insane case, intentionally generate an outlier.
        insane_value = mean + np.random.choice([-3, 3]) * std_dev
        data = np.append(data, insane_value)
    return data

def check_data_point(value, mean, std_dev):
    """
    Classify a data point as sane, borderline, or insane, with explanations.

    This function assesses where a data point falls in relation to the mean value,
    considering standard deviations to categorize the data's normalcy or anomaly.
    """
    sane_lower, sane_upper = mean - std_dev, mean + std_dev
    borderline_lower, borderline_upper = mean - 2*std_dev, mean + 2*std_dev

    if value < borderline_lower or value > borderline_upper:
        explanation = "Insane: Significantly outside typical range (>2 SD from mean)."
    elif value < sane_lower or value > sane_upper:
        explanation = "Borderline: Outside normal monthly range but within yearly tolerance (±1-2 SD from mean)."
    else:
        explanation = "Sane: Within typical monthly variation (±1 SD from mean)."
    return explanation

metrics = {
    "30-day Readmission": {"mean": 0, "std_dev": 3},
    "HTN: Controlling High BP": {"mean": 0, "std_dev": 5}
}

for metric, params in metrics.items():
    print(f"Metric: {metric}")
    for case in ["sane", "insane"]:
        data = generate_data(params["mean"], params["std_dev"], case=case)
        for month, value in enumerate(data, start=1):
            status_explanation = check_data_point(value, params["mean"], params["std_dev"])
            print(f"  Month {month}: {value:.2f}% - {status_explanation}")
        print("-" * 60)

